
&НаСервере
Функция СформироватьОтчетНаСервере() 
	
	Запрос1 = Новый Запрос("ВЫБРАТЬ
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка КАК Ссылка,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.ВКонтуре КАК ВКонтуре,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.Решение КАК Решение,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.Расширение КАК Расширение,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.Организация КАК Организация,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.ГруппаМетаданных КАК ГруппаМетаданных,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.Метаданные КАК Метаданные,
	                       |	ОписаниеИзмененийОписаниеСвойств.СвойствоМетаданных КАК СвойствоМетаданных,
	                       |	ОписаниеИзмененийОписаниеСвойств.Описание КАК Описание,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.Описание КАК Описание1,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.Ответственный КАК Ответственный,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.ДатаЗагрузки КАК ДатаЗагрузки,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.ПровереноПрограммистом КАК ПровереноПрограммистом,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.ПровереноКонсультантом КАК ПровереноКонсультантом,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.ПровереноКлиентом КАК ПровереноКлиентом,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.Отработано КАК Отработано,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.ТипИзменения КАК ТипИзменения,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.КомментарийПрограмист КАК КомментарийПрограмист,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.КомментарийКонсультант КАК КомментарийКонсультант,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.КонфигурацияИсточник КАК КонфигурацияИсточник,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.КонфигурацияПриемник КАК КонфигурацияПриемник,
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.ФункциональныйУчасток КАК ФункциональныйУчасток
	                       |ПОМЕСТИТЬ Данные
	                       |ИЗ
	                       |	Справочник.ОписаниеИзменений.ОписаниеСвойств КАК ОписаниеИзмененийОписаниеСвойств
	                       |ГДЕ
	                       |	ОписаниеИзмененийОписаниеСвойств.Ссылка.Организация В(&Организация)
	                       |	И ОписаниеИзмененийОписаниеСвойств.Ссылка.КонфигурацияИсточник В(&КонфигурацияИсточник)
	                       |	И ОписаниеИзмененийОписаниеСвойств.Ссылка.КонфигурацияПриемник В(&КонфигурацияПриемник)
	                       |	И НЕ ОписаниеИзмененийОписаниеСвойств.Ссылка.ПометкаУдаления
	                       |
	                       |ОБЪЕДИНИТЬ ВСЕ
	                       |
	                       |ВЫБРАТЬ
	                       |	ОписаниеИзменений.Ссылка,
	                       |	ОписаниеИзменений.ВКонтуре,
	                       |	ОписаниеИзменений.Решение,
	                       |	ОписаниеИзменений.Расширение,
	                       |	ОписаниеИзменений.Организация,
	                       |	ОписаниеИзменений.ГруппаМетаданных,
	                       |	ОписаниеИзменений.Метаданные,
	                       |	"""",
	                       |	"""",
	                       |	ОписаниеИзменений.Описание,
	                       |	ОписаниеИзменений.Ответственный,
	                       |	ОписаниеИзменений.ДатаЗагрузки,
	                       |	ОписаниеИзменений.ПровереноПрограммистом,
	                       |	ОписаниеИзменений.ПровереноКонсультантом,
	                       |	ОписаниеИзменений.ПровереноКлиентом,
	                       |	ОписаниеИзменений.Отработано,
	                       |	ОписаниеИзменений.ТипИзменения,
	                       |	ОписаниеИзменений.КомментарийПрограмист,
	                       |	ОписаниеИзменений.КомментарийКонсультант,
	                       |	ОписаниеИзменений.КонфигурацияИсточник,
	                       |	ОписаниеИзменений.КонфигурацияПриемник,
	                       |	ОписаниеИзменений.ФункциональныйУчасток
	                       |ИЗ
	                       |	Справочник.ОписаниеИзменений КАК ОписаниеИзменений
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОписаниеИзменений.ОписаниеСвойств КАК ОписаниеИзмененийОписаниеСвойств
	                       |		ПО ОписаниеИзменений.Ссылка = ОписаниеИзмененийОписаниеСвойств.Ссылка
	                       |ГДЕ
	                       |	ОписаниеИзменений.Организация В(&Организация)
	                       |	И ОписаниеИзменений.КонфигурацияИсточник В(&КонфигурацияИсточник)
	                       |	И ОписаниеИзменений.КонфигурацияПриемник В(&КонфигурацияПриемник)
	                       |	И НЕ ОписаниеИзменений.ПометкаУдаления
	                       |	И ОписаниеИзмененийОписаниеСвойств.Ссылка ЕСТЬ NULL
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                       |	Данные.ГруппаМетаданных КАК ГруппаМетаданных,
	                       |	Данные.Метаданные КАК Метаданные,
	                       |	Данные.СвойствоМетаданных КАК СвойствоМетаданных
	                       |ПОМЕСТИТЬ ДанныеМетаданных
	                       |ИЗ
	                       |	Данные КАК Данные
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	Данные.Ссылка КАК Ссылка,
	                       |	Данные.ВКонтуре КАК ВКонтуре,
	                       |	Данные.Решение КАК Решение,
	                       |	Данные.Расширение КАК Расширение,
	                       |	Данные.Организация КАК Организация,
	                       |	Данные.ГруппаМетаданных КАК ГруппаМетаданных,
	                       |	Данные.Метаданные КАК Метаданные,
	                       |	Данные.СвойствоМетаданных КАК СвойствоМетаданных,
	                       |	Данные.Описание КАК Описание,
	                       |	Данные.Описание1 КАК Описание1,
	                       |	Данные.Ответственный КАК Ответственный,
	                       |	Данные.ДатаЗагрузки КАК ДатаЗагрузки,
	                       |	Данные.ПровереноПрограммистом КАК ПровереноПрограммистом,
	                       |	Данные.ПровереноКонсультантом КАК ПровереноКонсультантом,
	                       |	Данные.ПровереноКлиентом КАК ПровереноКлиентом,
	                       |	Данные.Отработано КАК Отработано,
	                       |	ВЫБОР
	                       |		КОГДА Данные.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.ОбъектИзменен)
	                       |			ТОГДА ""Изменен""
	                       |		КОГДА Данные.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.ОбъектПрисутствуетТолькоВОсновнойКонфигурации)
	                       |			ТОГДА ""Добавлен""
	                       |		ИНАЧЕ ""В поставщика""
	                       |	КОНЕЦ КАК ТипИзменения,
	                       |	Данные.КомментарийПрограмист КАК КомментарийПрограмист,
	                       |	Данные.КомментарийКонсультант КАК КомментарийКонсультант,
	                       |	Данные.КонфигурацияИсточник КАК КонфигурацияИсточник,
	                       |	Данные.КонфигурацияПриемник КАК КонфигурацияПриемник,
	                       |	Данные.ФункциональныйУчасток КАК ФункциональныйУчасток
	                       |ИЗ
	                       |	Данные КАК Данные
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ДанныеМетаданных.ГруппаМетаданных КАК ГруппаМетаданных,
	                       |	ДанныеМетаданных.Метаданные КАК Метаданные,
	                       |	ДанныеМетаданных.СвойствоМетаданных КАК СвойствоМетаданных
	                       |ИЗ
	                       |	ДанныеМетаданных КАК ДанныеМетаданных
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ГруппаМетаданных,
	                       |	Метаданные,
	                       |	СвойствоМетаданных
	                       |ИТОГИ ПО
	                       |	ГруппаМетаданных,
	                       |	Метаданные,
	                       |	СвойствоМетаданных");
	
	КонфигурацияИсточникСписок = Новый Массив;
	ОрганизацияСписок = Новый Массив;
	КонфигурацияПриемникСписок = Новый Массив;

	Для каждого Орг Из Отчет.Данные Цикл 
		Если Орг.Флаг Тогда
			КонфигурацияИсточникСписок.Добавить(Орг.КонфигурацияИсточник);
			КонфигурацияПриемникСписок.Добавить(Орг.КонфигурацияПриемник);
			ОрганизацияСписок.Добавить(Орг.Организация);
		КонецЕсли;
	КонецЦикла; 
	
	Запрос1.УстановитьПараметр("КонфигурацияИсточник", КонфигурацияИсточникСписок); 
	Запрос1.УстановитьПараметр("КонфигурацияПриемник", КонфигурацияПриемникСписок);
	Запрос1.УстановитьПараметр("Организация", ОрганизацияСписок);
	
	РезультатЗапроса = Запрос1.ВыполнитьПакет();
	
	ТаблицаДанные = РезультатЗапроса[2].Выгрузить();
	ВыборкаГруппаМетаданных = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	//создание нового табличного документа
	ТабОтчет.Очистить();
	
	//получение макета для печати расходной накладной
	Макет = Отчеты.ОтчетСравнениеОтклоненийКонфигураций.ПолучитьМакет("ОсновнойМакет");
	ОбластьПустыеСтроки = Макет.ПолучитьОбласть("ОбластьПустыеСтроки|Колонка");
	ОбластьШапка =  Макет.ПолучитьОбласть("ОбластьШапка|ШапкаКолонка");
	ОбластьСтрокаГруппаМетаданных = Макет.ПолучитьОбласть("СтрокаГруппаМетаданных|Колонка"); 
	ОбластьСтрокаСвойствоМетаданных = Макет.ПолучитьОбласть("СвойствоМетаданных|Колонка");
	ОбластьСтрокаМетаданные = Макет.ПолучитьОбласть("СтрокаМетаданные|Колонка");
	ОбластьСтрокаДанных = Макет.ПолучитьОбласть("ДанныеСтрока|ДанныеКолонка");
	
	ТабОтчет.Вывести(ОбластьПустыеСтроки); 
	
	Для каждого Орг Из Отчет.Данные Цикл 
		Если Орг.Флаг Тогда
			ОбластьШапка.Параметры.Организация = Орг.Организация;
			ТабОтчет.Присоединить(ОбластьШапка); 
		КонецЕсли;
	КонецЦикла; 
	
	Пока ВыборкаГруппаМетаданных.Следующий() Цикл	

		ОбластьСтрокаГруппаМетаданных.Параметры.ГруппаМетаданных = ВыборкаГруппаМетаданных.ГруппаМетаданных;
		//ТабОтчет.НачатьАвтогруппировкуСтрок();
		ТабОтчет.Вывести(ОбластьСтрокаГруппаМетаданных);
		ТабОтчет.НачатьГруппуСтрок("ГруппаМетаданные");
		//ТабОтчет.НачатьГруппуСтрок(ОбластьСтрокаГруппаМетаданных); 
		
		ВыборкаМетаданые =  ВыборкаГруппаМетаданных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаМетаданые.Следующий() Цикл
			
			// Вывод метаданные !!!!!!!!!!!!!!!
			ОбластьСтрокаМетаданные.Параметры.Метаданные = ВыборкаМетаданые.Метаданные;
			//ТабОтчет.НачатьАвтогруппировкуСтрок();
			//ТабОтчет.НачатьГруппуСтрок(ОбластьСтрокаМетаданные); 

			//////////////////
			
			// Добавить вывод данных по организации 
            КС = 0;
			Для каждого Орг Из Отчет.Данные Цикл
				Если Орг.Флаг Тогда
					
					НашиСтроки = ТаблицаДанные.НайтиСтроки(Новый Структура("ГруппаМетаданных, Метаданные, Организация",
					ВыборкаГруппаМетаданных.ГруппаМетаданных, ВыборкаМетаданые.Метаданные, Орг.Организация));
					
					Если НашиСтроки.Количество() <> 0  Тогда
				    КС = КС + 1;	
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			ОбластьСтрокаМетаданные.Параметры.КС = КС;

			ТабОтчет.Вывести(ОбластьСтрокаМетаданные); 
			ТабОтчет.НачатьГруппуСтрок("Метаданные");

			
			Для каждого Орг Из Отчет.Данные Цикл
				Если Орг.Флаг Тогда
					
					НашиСтроки = ТаблицаДанные.НайтиСтроки(Новый Структура("ГруппаМетаданных, Метаданные, Организация",
					ВыборкаГруппаМетаданных.ГруппаМетаданных, ВыборкаМетаданые.Метаданные, Орг.Организация));
					
					Если НашиСтроки.Количество() = 0  Тогда
						ТабОтчет.НачатьГруппуКолонок();

						// выводим пустую область !!!
						ОбластьСтрокаДанных.Параметры.ВКонтуре = ""; 
						ОбластьСтрокаДанных.Параметры.ФункциональныйУчасток = "";
						ОбластьСтрокаДанных.Параметры.Описание = "";  
						ОбластьСтрокаДанных.Параметры.ОписаниеСтр = "";
						ОбластьСтрокаДанных.Параметры.Ответственный = "";
						ОбластьСтрокаДанных.Параметры.Перенесено = "";
						ОбластьСтрокаДанных.Параметры.ПрIT = "";
	                    ОбластьСтрокаДанных.Параметры.ПрКли = "";
						ОбластьСтрокаДанных.Параметры.ПрКон = "";
						ОбластьСтрокаДанных.Параметры.Расш = "";
						ОбластьСтрокаДанных.Параметры.Ссылка = "";
						ОбластьСтрокаДанных.Параметры.ТипИзменения = "";  
						ОбластьСтрокаДанных.Параметры.Решение = "";
						ОбластьСтрокаДанных.Параметры.КомментарийIt = "";
						ОбластьСтрокаДанных.Параметры.КомментарийКонсультант = "";
						ТабОтчет.Присоединить(ОбластьСтрокаДанных); 
						ТабОтчет.ЗакончитьГруппуКолонок();
						//ТабОтчет.Область(, 2, , 15).Сгруппировать();
						//ТабОтчет.НачатьГруппуКолонок("Организация " + Орг.Организация);
					Иначе
						ТабОтчет.НачатьГруппуКолонок();
						// Заполнем область
						//ОбластьСтрокаДанных.Параметры.Заполнить(НашиСтроки[0]);
						ОбластьСтрокаДанных.Параметры.ВКонтуре = НашиСтроки[0].Вконтуре; 
						ОбластьСтрокаДанных.Параметры.ФункциональныйУчасток = НашиСтроки[0].ФункциональныйУчасток;
						ОбластьСтрокаДанных.Параметры.ОписаниеСтр = ?(ПустаяСтрока(НашиСтроки[0].Описание1), "", "Нажмите");
						ОбластьСтрокаДанных.Параметры.Описание = НашиСтроки[0].Описание1;
						ОбластьСтрокаДанных.Параметры.Ответственный = НашиСтроки[0].Ответственный;
						ОбластьСтрокаДанных.Параметры.Перенесено = НашиСтроки[0].Отработано;
						ОбластьСтрокаДанных.Параметры.ПрIT = НашиСтроки[0].ПровереноПрограммистом;
	                    ОбластьСтрокаДанных.Параметры.ПрКли = НашиСтроки[0].ПровереноКонсультантом;
						ОбластьСтрокаДанных.Параметры.ПрКон = НашиСтроки[0].ПровереноКлиентом;
						ОбластьСтрокаДанных.Параметры.Расш = НашиСтроки[0].Расширение;
						ОбластьСтрокаДанных.Параметры.Ссылка = НашиСтроки[0].Ссылка;
						ОбластьСтрокаДанных.Параметры.ТипИзменения = НашиСтроки[0].ТипИзменения;
						ОбластьСтрокаДанных.Параметры.Решение = НашиСтроки[0].Решение;
						ОбластьСтрокаДанных.Параметры.КомментарийIt = НашиСтроки[0].КомментарийПрограмист;
						ОбластьСтрокаДанных.Параметры.КомментарийКонсультант = НашиСтроки[0].КомментарийКонсультант;
						ТабОтчет.Присоединить(ОбластьСтрокаДанных); 
						//ТабОтчет.Область(, 2, , 15).Сгруппировать();
						//ТабОтчет.НачатьГруппуКолонок("Организация " + Орг.Организация); 
						ТабОтчет.ЗакончитьГруппуКолонок();
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			///////////////
			
			Если НЕ Отчет.ВыводитьБезСвойств Тогда
				ВыборкаСвойствоМетаданных = ВыборкаМетаданые.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаСвойствоМетаданных.Следующий() Цикл
					
					// Вывод метаданные  !!!!!!!!!!!!!!!!    
					
					ОбластьСтрокаСвойствоМетаданных.Параметры.СвойствоМетаданных = ВыборкаСвойствоМетаданных.СвойствоМетаданных;	
					//ТабОтчет.НачатьАвтогруппировкуСтрок();
					ТабОтчет.Вывести(ОбластьСтрокаСвойствоМетаданных);  
					
					Для каждого Орг Из Отчет.Данные Цикл
					    Если Орг.Флаг Тогда
							НашиСтроки = ТаблицаДанные.НайтиСтроки(Новый Структура("ГруппаМетаданных, Метаданные, Организация, СвойствоМетаданных", 
							ВыборкаГруппаМетаданных.ГруппаМетаданных, ВыборкаМетаданые.Метаданные, Орг.Организация, ВыборкаСвойствоМетаданных.СвойствоМетаданных));
							
							Если НашиСтроки.Количество() = 0  Тогда
								ТабОтчет.НачатьГруппуКолонок();
								// выводим пустую область !!!
								ОбластьСтрокаДанных.Параметры.ВКонтуре = ""; 
								ОбластьСтрокаДанных.Параметры.ФункциональныйУчасток = "";
								ОбластьСтрокаДанных.Параметры.Описание = ""; 
								ОбластьСтрокаДанных.Параметры.ОписаниеСтр = "";
								ОбластьСтрокаДанных.Параметры.Ответственный = "";
								ОбластьСтрокаДанных.Параметры.Перенесено = "";
								ОбластьСтрокаДанных.Параметры.ПрIT = "";
			                    ОбластьСтрокаДанных.Параметры.ПрКли = "";
								ОбластьСтрокаДанных.Параметры.ПрКон = "";
								ОбластьСтрокаДанных.Параметры.Расш = "";
								ОбластьСтрокаДанных.Параметры.Ссылка = "";
								ОбластьСтрокаДанных.Параметры.ТипИзменения = "";  
								ОбластьСтрокаДанных.Параметры.Решение = "";
								ОбластьСтрокаДанных.Параметры.КомментарийIt = "";
								ОбластьСтрокаДанных.Параметры.КомментарийКонсультант = "";
								ТабОтчет.Присоединить(ОбластьСтрокаДанных);
								//ТабОтчет.Область(, 16, , 29).Сгруппировать();	
								ТабОтчет.ЗакончитьГруппуКолонок();

							Иначе
								ТабОтчет.НачатьГруппуКолонок();

								// Заполнем область
								//ОбластьСтрокаДанных.Параметры.Заполнить(НашиСтроки[0]); 
								ОбластьСтрокаДанных.Параметры.ВКонтуре = ""; 
								ОбластьСтрокаДанных.Параметры.ФункциональныйУчасток = ""; 
								ОбластьСтрокаДанных.Параметры.Ответственный = "";
								ОбластьСтрокаДанных.Параметры.Перенесено = "";
								ОбластьСтрокаДанных.Параметры.ПрIT = "";
			                    ОбластьСтрокаДанных.Параметры.ПрКли = "";
								ОбластьСтрокаДанных.Параметры.ПрКон = "";
								ОбластьСтрокаДанных.Параметры.Расш = "";
								ОбластьСтрокаДанных.Параметры.Описание = НашиСтроки[0].Описание; 
								ОбластьСтрокаДанных.Параметры.ОписаниеСтр = ?(ПустаяСтрока(НашиСтроки[0].Описание), "", "Нажмите");
								ОбластьСтрокаДанных.Параметры.Ссылка = НашиСтроки[0].Ссылка;
								ОбластьСтрокаДанных.Параметры.ТипИзменения = НашиСтроки[0].ТипИзменения;
		                        ОбластьСтрокаДанных.Параметры.Решение = "";
								ОбластьСтрокаДанных.Параметры.КомментарийIt = "";
								ОбластьСтрокаДанных.Параметры.КомментарийКонсультант = "";

								ТабОтчет.Присоединить(ОбластьСтрокаДанных);
								//ТабОтчет.Область(, 16, , 29).Сгруппировать();   
								ТабОтчет.ЗакончитьГруппуКолонок();
							КонецЕсли;
						КонецЕсли; 
					КонецЦикла;	
							
				КонецЦикла;
				
				КонецЕсли;
			//ТабОтчет.ЗакончитьАвтогруппировкуСтрок();		
			//ТабОтчет.ЗакончитьГруппуСтрок();
			ТабОтчет.ЗакончитьГруппуСтрок();
		КонецЦикла;
		//ТабОтчет.ЗакончитьАвтогруппировкуСтрок();
		//ТабОтчет.ЗакончитьГруппуСтрок(); 
		ТабОтчет.ЗакончитьГруппуСтрок();

	КонецЦикла;
	//ТабОтчет.ЗакончитьАвтогруппировкуСтрок();
	//ТабОтчет.ПоказатьУровеньГруппировокСтрок(3);
	//ОбластьСтрокаГруппаМетаданных.Параметры.ГруппаМетаданных = "Документ"; 
	//ТабОтчет.НачатьГруппуСтрок("Документы");
	//ТабОтчет.Вывести(ОбластьСтрокаГруппаМетаданных);  
	//
	//ОбластьСтрокаМетаданные.Параметры.Метаданные = "pwcКорректировкаПереоценкиВалютыВНУ";
	//
	//Для каждого Орг Из Отчет.Данные Цикл
	//	ОбластьСтрокаДанных.Параметры.ВКонтуре = "Да";
	//	ОбластьСтрокаДанных.Параметры.Ссылка = "Объект присутствует только в конфигурации приемнике  - Документ - pwcКорректировкаПереоценкиВалютыВНУ";
	//	ТабОтчет.Присоединить(ОбластьСтрокаДанных); 
	//КонецЦикла;
	//
	//ТабОтчет.ЗакончитьГруппуСтрок();;
	
	
	//установим параметры отображения табличного документа
	ТабОтчет.ТолькоПросмотр = Истина;
	ТабОтчет.ОтображатьЗаголовки = Истина;
	ТабОтчет.ОтображатьСетку = Ложь;
	ТабОтчет.ФиксацияСлева = 1;
	ТабОтчет.ФиксацияСверху = 2;    
	
	Возврат ТабОтчет;
	
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	ТабОтчет = СформироватьОтчетНаСервере();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтчет;
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()    
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОписаниеИзменений.Организация КАК Организация,
	               |	ОписаниеИзменений.КонфигурацияИсточник КАК КонфигурацияИсточник,
	               |	ОписаниеИзменений.КонфигурацияПриемник КАК КонфигурацияПриемник
	               |ИЗ
	               |	Справочник.ОписаниеИзменений КАК ОписаниеИзменений
	               |ГДЕ
	               |	НЕ ОписаниеИзменений.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	

	Для Каждого Стр Из РезультатЗапроса Цикл
       НовСтрока = Отчет.Данные.Добавить();  
	   ЗаполнитьЗначенияСвойств(НовСтрока,Стр)
	   //ТЧДанные.КонфигурацияИсточник = Стр.КонфигурацияИсточник;
	   //ТЧДанные.КонфигурацияПриемник = Стр.КонфигурацияПриемник;
	   //ТЧДанные.Организация = Стр.Организация;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
КонецПроцедуры
